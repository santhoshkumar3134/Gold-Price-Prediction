# -*- coding: utf-8 -*-
"""Gold Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AdoWsWNqxFRvNbR1UtjfgatQQyxzqpas

# ***importing section reading dataset and printing basic info***
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/gold_data.csv')

df.head()

df.shape

df.info()

df.isnull().sum()

df.describe()

df.nunique()

"""# ***heat map and important features extract***"""

df=df.drop(['Date'],axis=1)

# Create a heatmap of the correlation matrix
corr_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='Blues')
plt.show()

corr_matrix['Price']

"""# ***graphical representation***"""

sns.distplot(df['Price'] ,color='Blue')

sns.pairplot(df)
plt.show()

plt.plot(df, linestyle = '--', linewidth='5.7')

plt.show()

"""# ***traning the model***"""

# prompt: train test split

X = df.drop('Price', axis=1)
y = df['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)

print('X_train shape:', X_train.shape)
print('y_train shape:', y_train.shape)
print('X_test shape:', X_test.shape)
print('y_test shape:', y_test.shape)

reg=LinearRegression()
reg.fit(X_train,y_train)

"""# ***testing the model***"""

reg.predict(X_test)

# prompt: predicte accuracy in linear regression

from sklearn.metrics import r2_score

y_pred = reg.predict(X_test)
r2_score_linearRegression = r2_score(y_test, y_pred)
print("R2 score:", r2_score_linearRegression)

"""# ***output graph***"""

# prompt: i want to make graph for y_predict and y_test

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='red')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='blue', linestyle='--')
plt.xlabel('Actual Values', fontsize=12)
plt.ylabel('Predicted Values', fontsize=12)
plt.title('Actual vs Predicted Values', fontsize=14)
plt.grid(True)
plt.show()

from sklearn import metrics
print(metrics.mean_absolute_error(y_test,y_pred))

print(metrics.mean_squared_error(y_test,y_pred))

print(np.sqrt(metrics.mean_squared_error(y_test,y_pred)))

import pickle
pickle.dump(reg,open('model.pkl','wb'))